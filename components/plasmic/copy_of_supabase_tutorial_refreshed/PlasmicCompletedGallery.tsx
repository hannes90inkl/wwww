// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x43pEJN2k2QkoGRM4VhiXy
// Component: iBABZv7NwleF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: p2WhGefA2cIA/component
import { SupabaseGrid } from "../../CodeComponents/DisplayCollections"; // plasmic-import: itUbOXKK3j3r/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import { SupabaseField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: weneSHAl06nL/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: x43pEJN2k2QkoGRM4VhiXy/projectcss
import sty from "./PlasmicCompletedGallery.module.css"; // plasmic-import: iBABZv7NwleF/css

createPlasmicElementProxy;

export type PlasmicCompletedGallery__VariantMembers = {};
export type PlasmicCompletedGallery__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompletedGallery__VariantsArgs;
export const PlasmicCompletedGallery__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCompletedGallery__ArgsType = {};
type ArgPropType = keyof PlasmicCompletedGallery__ArgsType;
export const PlasmicCompletedGallery__ArgProps = new Array<ArgPropType>();

export type PlasmicCompletedGallery__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  supabaseGrid?: p.Flex<typeof SupabaseGrid>;
  tilt?: p.Flex<typeof Tilt>;
  text?: p.Flex<"div">;
};

export interface DefaultCompletedGalleryProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCompletedGallery__RenderFunc(props: {
  variants: PlasmicCompletedGallery__VariantsArgs;
  args: PlasmicCompletedGallery__ArgsType;
  overrides: PlasmicCompletedGallery__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
            onCompletedGallery={true}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ppuUg)}>
            <SupabaseGrid
              data-plasmic-name={"supabaseGrid"}
              data-plasmic-override={overrides.supabaseGrid}
              className={classNames("__wab_instance", sty.supabaseGrid)}
              loading={
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "Loading...\nIf this persists, please log in to the application first."
                  }
                </div>
              }
              tableColumns={["name", "imageUrl"]}
              tableName={"entries"}
            >
              <Tilt
                data-plasmic-name={"tilt"}
                data-plasmic-override={overrides.tilt}
                className={classNames("__wab_instance", sty.tilt)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nTrgY)}>
                  <SupabaseField
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseField__bDn3N
                    )}
                    selector={"{{row.imageUrl}}"}
                    type={"image"}
                  />

                  <SupabaseField
                    className={classNames(
                      "__wab_instance",
                      sty.supabaseField__fBjTu
                    )}
                    selector={"{{row.name}}"}
                    type={"text"}
                  />
                </div>
              </Tilt>
            </SupabaseGrid>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navBar", "supabaseGrid", "tilt", "text"],
  navBar: ["navBar"],
  supabaseGrid: ["supabaseGrid", "tilt", "text"],
  tilt: ["tilt"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  supabaseGrid: typeof SupabaseGrid;
  tilt: typeof Tilt;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompletedGallery__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompletedGallery__VariantsArgs;
    args?: PlasmicCompletedGallery__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompletedGallery__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCompletedGallery__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCompletedGallery__ArgProps,
          internalVariantPropNames: PlasmicCompletedGallery__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCompletedGallery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompletedGallery";
  } else {
    func.displayName = `PlasmicCompletedGallery.${nodeName}`;
  }
  return func;
}

export const PlasmicCompletedGallery = Object.assign(
  // Top-level PlasmicCompletedGallery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    supabaseGrid: makeNodeComponent("supabaseGrid"),
    tilt: makeNodeComponent("tilt"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicCompletedGallery
    internalVariantProps: PlasmicCompletedGallery__VariantProps,
    internalArgProps: PlasmicCompletedGallery__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCompletedGallery;
/* prettier-ignore-end */
