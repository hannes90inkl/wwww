// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x43pEJN2k2QkoGRM4VhiXy
// Component: kauyexwNygGC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: p2WhGefA2cIA/component
import { SupabaseUserSession } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: kFpr9TLnB156/codeComponent
import { RedirectIf } from "../../CodeComponents/LogicComponents"; // plasmic-import: Q52CzugLJEeB/codeComponent
import Button from "../../Button"; // plasmic-import: 2cx-U1hY5Rzc/component
import { SupabaseQuery } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: bJKhLkEhkFdF/codeComponent
import { SupabaseGridCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: VXjKRRGS4f4b/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import Post from "../../Post"; // plasmic-import: oGEkZRaQbG-m/component
import { SupabaseTextField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: dPNmvtm9vKJc/codeComponent
import { SupabaseImgField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: hV3_NOijqgC_/codeComponent
import { SupabaseTableCollection } from "../../CodeComponents/DisplayCollections"; // plasmic-import: nM9TD8APraRI/codeComponent
import { SupabaseEditButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: OUAnysApxvDr/codeComponent
import { SupabaseDeleteButton } from "../../CodeComponents/UtilsComponents"; // plasmic-import: h7fy4Y8cd8Y-/codeComponent
import { SupabaseMutation } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: cx55mTPYjtZn/codeComponent
import { SupabaseModal } from "../../CodeComponents/UtilsComponents"; // plasmic-import: SMbfFv3YFwrC/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsmPnKxIvqWh1E } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: MPnKxIVQWh1E/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: x43pEJN2k2QkoGRM4VhiXy/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: kauyexwNygGC/css

import PlusIcon from "./icons/PlasmicIcon__Plus"; // plasmic-import: _UwwOHdlbXmK/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 0Y5d3IkdXMyo/icon
import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: 2ZeED8LGaeZT/icon
import DeleteIcon from "./icons/PlasmicIcon__Delete"; // plasmic-import: cQnRj44BuHAL/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  supabaseUserSession?: p.Flex<typeof SupabaseUserSession>;
  redirectIf?: p.Flex<typeof RedirectIf>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  supabaseQuery?: p.Flex<typeof SupabaseQuery>;
  supabaseGridCollection?: p.Flex<typeof SupabaseGridCollection>;
  tilt?: p.Flex<typeof Tilt>;
  post?: p.Flex<typeof Post>;
  supabaseTableCollection?: p.Flex<typeof SupabaseTableCollection>;
  supabaseEditButton?: p.Flex<typeof SupabaseEditButton>;
  supabaseDeleteButton?: p.Flex<typeof SupabaseDeleteButton>;
  supabaseMutation?: p.Flex<typeof SupabaseMutation>;
  supabaseModal?: p.Flex<typeof SupabaseModal>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmPnKxIvqWh1E()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <SupabaseUserSession
            data-plasmic-name={"supabaseUserSession"}
            data-plasmic-override={overrides.supabaseUserSession}
            className={classNames("__wab_instance", sty.supabaseUserSession)}
          >
            <RedirectIf
              data-plasmic-name={"redirectIf"}
              data-plasmic-override={overrides.redirectIf}
              className={classNames("__wab_instance", sty.redirectIf)}
              forcePreview={true}
              leftExpression={"{{session.email}}"}
              operator={"FALSY"}
              redirectUrl={"/login-page"}
            >
              <div className={classNames(projectcss.all, sty.freeBox___8G0B2)}>
                <div className={classNames(projectcss.all, sty.freeBox__ttVyf)}>
                  <p.PlasmicLink
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link
                    )}
                    component={Link}
                    href={`/completed-gallery`}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ctnX9)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"320px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/copy_of_supabase_tutorial_refreshed/images/pokemonLogopng.png",
                        fullWidth: 800,
                        fullHeight: 450,
                        aspectRatio: undefined
                      }}
                    />
                  </p.PlasmicLink>
                  <Button
                    className={classNames("__wab_instance", sty.button__rEecM)}
                    color={"green"}
                    link={`/post/add`}
                    showStartIcon={true}
                    startIcon={
                      <PlusIcon
                        className={classNames(projectcss.all, sty.svg__pfizl)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ic3K
                      )}
                    >
                      {"New Entry"}
                    </div>
                  </Button>
                </div>
                <SupabaseQuery
                  data-plasmic-name={"supabaseQuery"}
                  data-plasmic-override={overrides.supabaseQuery}
                  className={classNames("__wab_instance", sty.supabaseQuery)}
                  columns={"name, description, id, imageUrl"}
                  tableName={"entries"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kuUvv)}
                  >
                    <SupabaseGridCollection
                      data-plasmic-name={"supabaseGridCollection"}
                      data-plasmic-override={overrides.supabaseGridCollection}
                      className={classNames(
                        "__wab_instance",
                        sty.supabaseGridCollection
                      )}
                      loading={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2UjAf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__va5FQ
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__knUyV)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"160px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/copy_of_supabase_tutorial_refreshed/images/loadingIconjpeg.svg",
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0CJhK
                            )}
                          >
                            {
                              "Loading\u2026\nIf this persists, please log in to the application first.\nYou can customize this loading state!"
                            }
                          </div>
                        </p.Stack>
                      }
                    >
                      <Tilt
                        data-plasmic-name={"tilt"}
                        data-plasmic-override={overrides.tilt}
                        className={classNames("__wab_instance", sty.tilt)}
                        glareBorderRadius={"16"}
                        glareEnable={true}
                        glareMaxOpacity={0.075}
                        glareReverse={true}
                        tiltMaxAngleX={3}
                        tiltMaxAngleY={3}
                      >
                        <Post
                          data-plasmic-name={"post"}
                          data-plasmic-override={overrides.post}
                          className={classNames("__wab_instance", sty.post)}
                          description={
                            <SupabaseTextField
                              className={classNames(
                                "__wab_instance",
                                sty.supabaseTextField__x8Alv
                              )}
                              name={"{{row.description}}"}
                            />
                          }
                          image={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__bdvry
                              )}
                            >
                              <SupabaseImgField
                                className={classNames(
                                  "__wab_instance",
                                  sty.supabaseImgField__ioBqT
                                )}
                                url={"{{row.imageUrl}}"}
                              />
                            </div>
                          }
                          title={
                            <SupabaseTextField
                              className={classNames(
                                "__wab_instance",
                                sty.supabaseTextField__gPOr5
                              )}
                              name={"{{row.name}}"}
                            />
                          }
                        />
                      </Tilt>
                    </SupabaseGridCollection>
                    <SupabaseTableCollection
                      data-plasmic-name={"supabaseTableCollection"}
                      data-plasmic-override={overrides.supabaseTableCollection}
                      canDelete={true}
                      canEdit={true}
                      className={classNames(
                        "__wab_instance",
                        sty.supabaseTableCollection
                      )}
                      columns={"name, description"}
                      deleteSlot={
                        <SupabaseDeleteButton
                          data-plasmic-name={"supabaseDeleteButton"}
                          data-plasmic-override={overrides.supabaseDeleteButton}
                          className={classNames(
                            "__wab_instance",
                            sty.supabaseDeleteButton
                          )}
                          id={"{{row.id}}"}
                          modal={
                            <SupabaseMutation
                              data-plasmic-name={"supabaseMutation"}
                              data-plasmic-override={overrides.supabaseMutation}
                              className={classNames(
                                "__wab_instance",
                                sty.supabaseMutation
                              )}
                              filters={[
                                {
                                  name: "eq",
                                  args: [
                                    { column: "id", value: "{{local.id}}" }
                                  ]
                                }
                              ]}
                              method={"delete"}
                              redirectOnSuccess={"/"}
                              tableName={"entries"}
                            >
                              <SupabaseModal
                                data-plasmic-name={"supabaseModal"}
                                data-plasmic-override={overrides.supabaseModal}
                                className={classNames(
                                  "__wab_instance",
                                  sty.supabaseModal
                                )}
                                showModal={false}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qKsgX
                                  )}
                                >
                                  <SupabaseTextField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.supabaseTextField__z5DT
                                    )}
                                    name={"{{row.name}}"}
                                  />

                                  <SupabaseTextField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.supabaseTextField__t9Uie
                                    )}
                                    name={"{{row.description}}"}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___0YrpE
                                    )}
                                  >
                                    <SupabaseImgField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.supabaseImgField___7Kh83
                                      )}
                                      url={"{{row.imageUrl}}"}
                                    />
                                  </div>
                                </div>
                              </SupabaseModal>
                            </SupabaseMutation>
                          }
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__e2Iop
                            )}
                            color={"clear"}
                            hideLabel={true}
                            showStartIcon={true}
                            startIcon={
                              <DeleteIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__deCmW
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={true}
                          />
                        </SupabaseDeleteButton>
                      }
                      editSlot={
                        <SupabaseEditButton
                          data-plasmic-name={"supabaseEditButton"}
                          data-plasmic-override={overrides.supabaseEditButton}
                          className={classNames(
                            "__wab_instance",
                            sty.supabaseEditButton
                          )}
                          editPage={"/post/update/id"}
                          id={"{{row.id}}"}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__scQlR
                            )}
                            color={"clear"}
                            hideLabel={true}
                            showStartIcon={true}
                            startIcon={
                              <EditIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__chum7
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wz2Jb
                              )}
                            >
                              {"Edit"}
                            </div>
                          </Button>
                        </SupabaseEditButton>
                      }
                      loading={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k3D8Y
                          )}
                        >
                          {"Loading..."}
                        </div>
                      }
                    />
                  </p.Stack>
                </SupabaseQuery>
              </div>
            </RedirectIf>
          </SupabaseUserSession>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "supabaseUserSession",
    "redirectIf",
    "link",
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  navBar: ["navBar"],
  supabaseUserSession: [
    "supabaseUserSession",
    "redirectIf",
    "link",
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  redirectIf: [
    "redirectIf",
    "link",
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  link: ["link"],
  supabaseQuery: [
    "supabaseQuery",
    "supabaseGridCollection",
    "tilt",
    "post",
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  supabaseGridCollection: ["supabaseGridCollection", "tilt", "post"],
  tilt: ["tilt", "post"],
  post: ["post"],
  supabaseTableCollection: [
    "supabaseTableCollection",
    "supabaseEditButton",
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  supabaseEditButton: ["supabaseEditButton"],
  supabaseDeleteButton: [
    "supabaseDeleteButton",
    "supabaseMutation",
    "supabaseModal"
  ],
  supabaseMutation: ["supabaseMutation", "supabaseModal"],
  supabaseModal: ["supabaseModal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  supabaseUserSession: typeof SupabaseUserSession;
  redirectIf: typeof RedirectIf;
  link: "a";
  supabaseQuery: typeof SupabaseQuery;
  supabaseGridCollection: typeof SupabaseGridCollection;
  tilt: typeof Tilt;
  post: typeof Post;
  supabaseTableCollection: typeof SupabaseTableCollection;
  supabaseEditButton: typeof SupabaseEditButton;
  supabaseDeleteButton: typeof SupabaseDeleteButton;
  supabaseMutation: typeof SupabaseMutation;
  supabaseModal: typeof SupabaseModal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    supabaseUserSession: makeNodeComponent("supabaseUserSession"),
    redirectIf: makeNodeComponent("redirectIf"),
    link: makeNodeComponent("link"),
    supabaseQuery: makeNodeComponent("supabaseQuery"),
    supabaseGridCollection: makeNodeComponent("supabaseGridCollection"),
    tilt: makeNodeComponent("tilt"),
    post: makeNodeComponent("post"),
    supabaseTableCollection: makeNodeComponent("supabaseTableCollection"),
    supabaseEditButton: makeNodeComponent("supabaseEditButton"),
    supabaseDeleteButton: makeNodeComponent("supabaseDeleteButton"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    supabaseModal: makeNodeComponent("supabaseModal"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
