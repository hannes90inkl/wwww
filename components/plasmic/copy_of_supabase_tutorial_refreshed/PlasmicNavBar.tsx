// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x43pEJN2k2QkoGRM4VhiXy
// Component: p2WhGefA2cIA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseUserSession } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: kFpr9TLnB156/codeComponent
import { SupabaseTextField } from "../../CodeComponents/DisplayCollections"; // plasmic-import: dPNmvtm9vKJc/codeComponent
import { SupabaseUserLogOut } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: ynS1BlsEludR/codeComponent
import Button from "../../Button"; // plasmic-import: 2cx-U1hY5Rzc/component

import { useScreenVariants as useScreenVariantsmPnKxIvqWh1E } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: MPnKxIVQWh1E/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: x43pEJN2k2QkoGRM4VhiXy/projectcss
import sty from "./PlasmicNavBar.module.css"; // plasmic-import: p2WhGefA2cIA/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: yadOrbmQWTQp/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 0Y5d3IkdXMyo/icon

createPlasmicElementProxy;

export type PlasmicNavBar__VariantMembers = {
  onCompletedGallery: "onCompletedGallery";
};
export type PlasmicNavBar__VariantsArgs = {
  onCompletedGallery?: SingleBooleanChoiceArg<"onCompletedGallery">;
};
type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>(
  "onCompletedGallery"
);

export type PlasmicNavBar__ArgsType = {};
type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBar__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  supabaseUserSession?: p.Flex<typeof SupabaseUserSession>;
  supabaseTextField?: p.Flex<typeof SupabaseTextField>;
  supabaseUserLogOut?: p.Flex<typeof SupabaseUserLogOut>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultNavBarProps {
  onCompletedGallery?: SingleBooleanChoiceArg<"onCompletedGallery">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "onCompletedGallery",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.onCompletedGallery
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmPnKxIvqWh1E()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootonCompletedGallery]: hasVariant(
            $state,
            "onCompletedGallery",
            "onCompletedGallery"
          )
        }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__gh7VV,
          {
            [sty.textonCompletedGallery__gh7VVqYJsu]: hasVariant(
              $state,
              "onCompletedGallery",
              "onCompletedGallery"
            )
          }
        )}
      >
        {"Pok\u00e9dex on Supabase"}
      </div>
      {(
        hasVariant($state, "onCompletedGallery", "onCompletedGallery")
          ? true
          : false
      ) ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgonCompletedGallery]: hasVariant(
              $state,
              "onCompletedGallery",
              "onCompletedGallery"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={
            hasVariant(globalVariants, "screen", "mobile") ? "320px" : "320px"
          }
          loading={
            hasVariant(globalVariants, "screen", "mobile") ? "lazy" : "lazy"
          }
          src={
            hasVariant(globalVariants, "screen", "mobile")
              ? {
                  src: "/plasmic/copy_of_supabase_tutorial_refreshed/images/pokemonLogopng.png",
                  fullWidth: 800,
                  fullHeight: 450,
                  aspectRatio: undefined
                }
              : {
                  src: "/plasmic/copy_of_supabase_tutorial_refreshed/images/pokemonLogopng.png",
                  fullWidth: 800,
                  fullHeight: 450,
                  aspectRatio: undefined
                }
          }
        />
      ) : null}
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__cGov)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rW1LJ)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tSMtw
            )}
          >
            {"Hello, "}
          </div>
          <SupabaseUserSession
            data-plasmic-name={"supabaseUserSession"}
            data-plasmic-override={overrides.supabaseUserSession}
            className={classNames("__wab_instance", sty.supabaseUserSession)}
          >
            <SupabaseTextField
              data-plasmic-name={"supabaseTextField"}
              data-plasmic-override={overrides.supabaseTextField}
              className={classNames("__wab_instance", sty.supabaseTextField)}
              name={"{{session.email}}"}
            />
          </SupabaseUserSession>
        </p.Stack>
        <SupabaseUserLogOut
          data-plasmic-name={"supabaseUserLogOut"}
          data-plasmic-override={overrides.supabaseUserLogOut}
          className={classNames("__wab_instance", sty.supabaseUserLogOut)}
          redirectOnSuccess={"/login-page"}
        >
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            shape={"bordered"}
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qA0PJ
              )}
            >
              {"Log out"}
            </div>
          </Button>
        </SupabaseUserLogOut>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "supabaseUserSession",
    "supabaseTextField",
    "supabaseUserLogOut",
    "button"
  ],
  img: ["img"],
  supabaseUserSession: ["supabaseUserSession", "supabaseTextField"],
  supabaseTextField: ["supabaseTextField"],
  supabaseUserLogOut: ["supabaseUserLogOut", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  supabaseUserSession: typeof SupabaseUserSession;
  supabaseTextField: typeof SupabaseTextField;
  supabaseUserLogOut: typeof SupabaseUserLogOut;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavBar__ArgProps,
          internalVariantPropNames: PlasmicNavBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    supabaseUserSession: makeNodeComponent("supabaseUserSession"),
    supabaseTextField: makeNodeComponent("supabaseTextField"),
    supabaseUserLogOut: makeNodeComponent("supabaseUserLogOut"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
