// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x43pEJN2k2QkoGRM4VhiXy
// Component: IT276nwKq_g1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseQuery } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: bJKhLkEhkFdF/codeComponent
import { SupabaseMutation } from "../../CodeComponents/DatabaseComponents"; // plasmic-import: cx55mTPYjtZn/codeComponent
import { FormContextComponent } from "../../CodeComponents/Form"; // plasmic-import: zdydibl_QRnc/codeComponent
import { FormTextInput } from "../../CodeComponents/Form"; // plasmic-import: Mv8Ma1gxUCkw/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: 0yhLkRbRp4aL/component
import Button from "../../Button"; // plasmic-import: 2cx-U1hY5Rzc/component

import { useScreenVariants as useScreenVariantsmPnKxIvqWh1E } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: MPnKxIVQWh1E/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_supabase_tutorial_refreshed.module.css"; // plasmic-import: x43pEJN2k2QkoGRM4VhiXy/projectcss
import sty from "./PlasmicUpdateEntry.module.css"; // plasmic-import: IT276nwKq_g1/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 2SZIg4XMUDTg/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: yadOrbmQWTQp/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 0Y5d3IkdXMyo/icon

createPlasmicElementProxy;

export type PlasmicUpdateEntry__VariantMembers = {};
export type PlasmicUpdateEntry__VariantsArgs = {};
type VariantPropType = keyof PlasmicUpdateEntry__VariantsArgs;
export const PlasmicUpdateEntry__VariantProps = new Array<VariantPropType>();

export type PlasmicUpdateEntry__ArgsType = {
  test?: any;
  id?: string;
};
type ArgPropType = keyof PlasmicUpdateEntry__ArgsType;
export const PlasmicUpdateEntry__ArgProps = new Array<ArgPropType>(
  "test",
  "id"
);

export type PlasmicUpdateEntry__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  supabaseQuery?: p.Flex<typeof SupabaseQuery>;
  supabaseMutation?: p.Flex<typeof SupabaseMutation>;
  formContext?: p.Flex<typeof FormContextComponent>;
  textInput?: p.Flex<typeof TextInput>;
  textInput2?: p.Flex<typeof TextInput>;
  textarea?: p.Flex<"textarea">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultUpdateEntryProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUpdateEntry__RenderFunc(props: {
  variants: PlasmicUpdateEntry__VariantsArgs;
  args: PlasmicUpdateEntry__ArgsType;
  overrides: PlasmicUpdateEntry__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isTextareaFocusVisible, triggerTextareaFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: true
    }
  );
  const triggers = {
    focusVisible_textarea: isTextareaFocusVisible
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmPnKxIvqWh1E()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___04Tsf)}
          >
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Edit Entry"}
                </span>
              </React.Fragment>
            </h3>
            <SupabaseQuery
              data-plasmic-name={"supabaseQuery"}
              data-plasmic-override={overrides.supabaseQuery}
              className={classNames("__wab_instance", sty.supabaseQuery)}
              columns={"name, description, id, imageUrl"}
              filters={[
                { name: "eq", args: [{ column: "id", value: "{{local.id}}" }] }
              ]}
              single={true}
              tableName={"entries"}
            >
              <SupabaseMutation
                data-plasmic-name={"supabaseMutation"}
                data-plasmic-override={overrides.supabaseMutation}
                className={classNames("__wab_instance", sty.supabaseMutation)}
                data={{
                  name: "{{form.name}}",
                  description: "{{form.description}}",
                  imageUrl: "{{form.imageUrl}}"
                }}
                filters={[
                  {
                    name: "eq",
                    args: [{ column: "id", value: "{{local.id}}" }]
                  }
                ]}
                method={"update"}
                redirectOnSuccess={"/"}
                tableName={"entries"}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___6Y3Rr)}
                >
                  <FormContextComponent
                    data-plasmic-name={"formContext"}
                    data-plasmic-override={overrides.formContext}
                    className={classNames("__wab_instance", sty.formContext)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5O1Yn
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xENjy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l06Cy
                          )}
                        >
                          {"Name"}
                        </div>
                        <FormTextInput
                          className={classNames(
                            "__wab_instance",
                            sty.formTextInput__woXrr
                          )}
                          defaultValue={"{{query.name}}"}
                          name={"name"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput"}
                            data-plasmic-override={overrides.textInput}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput
                            )}
                            onChange={(...eventArgs) => {
                              p.generateStateOnChangeProp($state, [
                                "textInput",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            value={
                              p.generateStateValueProp($state, [
                                "textInput",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormTextInput>
                      </div>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n7HUo
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hizlz
                          )}
                        >
                          {"Image URL"}
                        </div>
                        <FormTextInput
                          className={classNames(
                            "__wab_instance",
                            sty.formTextInput___9CHxj
                          )}
                          defaultValue={"{{query.imageUrl}}"}
                          name={"imageUrl"}
                        >
                          <TextInput
                            data-plasmic-name={"textInput2"}
                            data-plasmic-override={overrides.textInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.textInput2
                            )}
                            onChange={(...eventArgs) => {
                              p.generateStateOnChangeProp($state, [
                                "textInput2",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            value={
                              p.generateStateValueProp($state, [
                                "textInput2",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormTextInput>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sCwIg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oF13
                          )}
                        >
                          {"Description"}
                        </div>
                        <FormTextInput
                          className={classNames(
                            "__wab_instance",
                            sty.formTextInput__navFj
                          )}
                          defaultValue={"{{query.description}}"}
                          name={"description"}
                        >
                          <textarea
                            data-plasmic-name={"textarea"}
                            data-plasmic-override={overrides.textarea}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea,
                              {
                                [sty.textarea___focusVisible]:
                                  triggers.focusVisible_textarea
                              }
                            )}
                            id={""}
                            placeholder={"Enter something..."}
                            value={""}
                            data-plasmic-trigger-props={[
                              triggerTextareaFocusVisibleProps
                            ]}
                          />
                        </FormTextInput>
                      </p.Stack>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__et3HC
                        )}
                      >
                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          color={"green"}
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mYrC
                            )}
                          >
                            {"Update"}
                          </div>
                        </Button>
                      </div>
                    </p.Stack>
                  </FormContextComponent>
                </div>
              </SupabaseMutation>
            </SupabaseQuery>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h3",
    "supabaseQuery",
    "supabaseMutation",
    "formContext",
    "textInput",
    "textInput2",
    "textarea",
    "button"
  ],
  h3: ["h3"],
  supabaseQuery: [
    "supabaseQuery",
    "supabaseMutation",
    "formContext",
    "textInput",
    "textInput2",
    "textarea",
    "button"
  ],
  supabaseMutation: [
    "supabaseMutation",
    "formContext",
    "textInput",
    "textInput2",
    "textarea",
    "button"
  ],
  formContext: ["formContext", "textInput", "textInput2", "textarea", "button"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textarea: ["textarea"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  supabaseQuery: typeof SupabaseQuery;
  supabaseMutation: typeof SupabaseMutation;
  formContext: typeof FormContextComponent;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  textarea: "textarea";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUpdateEntry__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUpdateEntry__VariantsArgs;
    args?: PlasmicUpdateEntry__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUpdateEntry__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUpdateEntry__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUpdateEntry__ArgProps,
          internalVariantPropNames: PlasmicUpdateEntry__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUpdateEntry__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpdateEntry";
  } else {
    func.displayName = `PlasmicUpdateEntry.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdateEntry = Object.assign(
  // Top-level PlasmicUpdateEntry renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    supabaseQuery: makeNodeComponent("supabaseQuery"),
    supabaseMutation: makeNodeComponent("supabaseMutation"),
    formContext: makeNodeComponent("formContext"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicUpdateEntry
    internalVariantProps: PlasmicUpdateEntry__VariantProps,
    internalArgProps: PlasmicUpdateEntry__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUpdateEntry;
/* prettier-ignore-end */
